---
  - name: Provision an EC2 Instance
    hosts: local
    connection: local
    gather_facts: False
    tags: provisioning
    # Necessary Variables for creating/provisioning the EC2 Instance
    vars:
      env: "staging"
      instance_type: t2.micro
      security_group: ansible-Docker
      image: ami-b83c0aa5
      region: eu-west-2
      count: 1

    # Task that will be used to Launch/Create an EC2 Instance
    tasks:

    - name: Create a security group
      ec2_group:
          name: "{{ security_group }}"
          description: Infrastructure for Docker CI pipeline
          region: "{{ region }}"
          rules:
              - proto: tcp
                from_port: 22
                to_port: 22
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 80
                to_port: 80
                cidr_ip: 0.0.0.0/0
              - proto: tcp
                from_port: 443
                to_port: 443
                cidr_ip: 0.0.0.0/0
          rules_egress:
              - proto: all
                cidr_ip: 0.0.0.0/0
      register: basic_firewall
      
    - name: Create an EC2 key
      ec2_key:
        name: "ansi-docker-{{ env }}-key"
        region: "{{ region }}"
      register: ec2_key

    - name: save private key       
      copy: content= "{{ ec2_key.private_key }}" dest= "./aws-{{ env }}-private.pem" mode= 0600
      when: ec2_key.changed
      
    - name: Launch the new EC2 Instance
        
      ec2: 
          key_name: "ansi-docker-{{ env }}-key"
          region: "{{ region }}"
          group_id: "{{ basic_firewall.group_id }}"
          instance_type: "{{ instance_type }}"
          image: "{{ image }}"
          wait: yes
          instance_tags:
          env: "{{ env }}"
          count_tag: env
          exact_count: 1
      register: ec2

    - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
      local_action: lineinfile 
                    dest="/etc/ansible/hosts" 
                    regexp={{ item.public_ip }} 
                    insertafter="[Docker]" line={{ item.public_ip }}
      with_items: ec2.instances


    - name: Wait for SSH to come up
      local_action: wait_for 
                    host={{ item.public_ip }} 
                    port=22 
                    state=started
      with_items: ec2.instances

    - name: Add tag to Instance(s)
      local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
      with_items: ec2.instances
      args:
        tags:
          Name: Docker
